# https://atcoder.jp/contests/abc007/tasks/abc007_3

import sys
from io import StringIO
import unittest
from collections import deque


def resolve():
    r, c = list(map(int, input().split()))
    sy, sx = list(map(int, input().split()))
    gy, gx = list(map(int, input().split()))
    sy -= 1
    sx -= 1
    gy -= 1
    gx -= 1
    C = []
    for _ in range(r):
        row = input()
        C.append(row)
    done = [[False for j in range(c)] for i in range(r)]

    q = deque()
    q.append((sy, sx, 0))
    vecs = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    while q:
        # sys.stderr.write(str(q))
        y, x, depth = q.popleft()
        if y == gy and x == gx:
            print(depth)
            break
        if C[y][x] == '#' or done[y][x]:
            continue
        done[y][x] = True
        for dy, dx in vecs:
            q.append((y+dy, x+dx, depth+1))


class TestClass(unittest.TestCase):
    def assertIO(self, input, output):
        stdout, stdin = sys.stdout, sys.stdin
        sys.stdout, sys.stdin = StringIO(), StringIO(input)
        resolve()
        sys.stdout.seek(0)
        out = sys.stdout.read()[:-1]
        sys.stdout, sys.stdin = stdout, stdin
        self.assertEqual(out, output)

    def test_入力例1(self):
        input = """7 8
2 2
4 5
########
#......#
#.######
#..#...#
#..##..#
##.....#
########"""
        output = """11"""
        self.assertIO(input, output)

    def test_入力例2(self):
        input = """5 8
2 2
2 4
########
#.#....#
#.###..#
#......#
########"""
        output = """10"""
        self.assertIO(input, output)

    def test_入力例3(self):
        input = """50 50
2 2
49 49
##################################################
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
##################################################"""
        output = """94"""
        self.assertIO(input, output)


if __name__ == "__main__":
    # unittest.main()
    resolve()
